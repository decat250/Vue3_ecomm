"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const vue_1 = require("vue");
const vueuc_1 = require("vueuc");
const vdirs_1 = require("vdirs");
const vooks_1 = require("vooks");
const _mixins_1 = require("../../_mixins");
const _utils_1 = require("../../_utils");
const styles_1 = require("../styles");
const DrawerBodyWrapper_1 = __importDefault(require("./DrawerBodyWrapper"));
const interface_1 = require("./interface");
const index_cssr_1 = __importDefault(require("./styles/index.cssr"));
const drawerProps = Object.assign(Object.assign({}, _mixins_1.useTheme.props), { show: Boolean, width: {
        type: [Number, String],
        default: 251
    }, height: {
        type: [Number, String],
        default: 251
    }, placement: {
        type: String,
        default: 'right'
    }, maskClosable: {
        type: Boolean,
        default: true
    }, to: [String, Object], displayDirective: {
        type: String,
        default: 'if'
    }, nativeScrollbar: {
        type: Boolean,
        default: true
    }, zIndex: Number, onMaskClick: Function, scrollbarProps: Object, contentStyle: [Object, String], trapFocus: {
        type: Boolean,
        default: true
    }, onEsc: Function, autoFocus: {
        type: Boolean,
        default: true
    }, closeOnEsc: {
        type: Boolean,
        default: true
    }, 'onUpdate:show': [Function, Array], onUpdateShow: [Function, Array], 
    /** @deprecated */
    drawerStyle: [String, Object], drawerClass: String, target: null, onShow: Function, onHide: Function });
exports.default = (0, vue_1.defineComponent)({
    name: 'Drawer',
    inheritAttrs: false,
    props: drawerProps,
    setup(props) {
        if (process.env.NODE_ENV !== 'production') {
            (0, vue_1.watchEffect)(() => {
                if (props.drawerStyle !== undefined) {
                    (0, _utils_1.warnOnce)('drawer', '`drawer-style` is deprecated, please use `style` instead.');
                }
                if (props.drawerClass !== undefined) {
                    (0, _utils_1.warnOnce)('drawer', '`drawer-class` is deprecated, please use `class` instead.');
                }
                if (props.target !== undefined) {
                    (0, _utils_1.warnOnce)('drawer', '`target` is deprecated, please use `to` instead.');
                }
                if (props.onShow !== undefined) {
                    (0, _utils_1.warnOnce)('drawer', '`on-show` is deprecated, please use `on-update:show` instead.');
                }
                if (props.onHide !== undefined) {
                    (0, _utils_1.warnOnce)('drawer', '`on-hide` is deprecated, please use `on-update:show` instead.');
                }
            });
        }
        const { mergedClsPrefixRef, namespaceRef } = (0, _mixins_1.useConfig)(props);
        const isMountedRef = (0, vooks_1.useIsMounted)();
        const themeRef = (0, _mixins_1.useTheme)('Drawer', '-drawer', index_cssr_1.default, styles_1.drawerLight, props, mergedClsPrefixRef);
        const styleWidthRef = (0, vue_1.computed)(() => {
            const { placement } = props;
            if (placement === 'top' || placement === 'bottom')
                return '';
            const { width } = props;
            return (0, _utils_1.formatLength)(width);
        });
        const styleHeightRef = (0, vue_1.computed)(() => {
            const { placement } = props;
            if (placement === 'left' || placement === 'right')
                return '';
            const { height } = props;
            return (0, _utils_1.formatLength)(height);
        });
        const mergedBodyStyleRef = (0, vue_1.computed)(() => {
            return [
                {
                    width: styleWidthRef.value,
                    height: styleHeightRef.value
                },
                props.drawerStyle
            ];
        });
        function handleMaskClick(e) {
            const { onMaskClick, maskClosable } = props;
            if (maskClosable) {
                doUpdateShow(false);
            }
            if (onMaskClick)
                onMaskClick(e);
        }
        function handleEsc() {
            var _a;
            (_a = props.onEsc) === null || _a === void 0 ? void 0 : _a.call(props);
            if (props.closeOnEsc) {
                doUpdateShow(false);
            }
        }
        function doUpdateShow(show) {
            const { onHide, onUpdateShow, 'onUpdate:show': _onUpdateShow } = props;
            if (onUpdateShow)
                (0, _utils_1.call)(onUpdateShow, show);
            if (_onUpdateShow)
                (0, _utils_1.call)(_onUpdateShow, show);
            // deprecated
            if (onHide && !show)
                (0, _utils_1.call)(onHide, show);
        }
        (0, vue_1.provide)(interface_1.drawerInjectionKey, {
            isMountedRef: isMountedRef,
            mergedThemeRef: themeRef,
            mergedClsPrefixRef,
            doUpdateShow
        });
        return {
            mergedClsPrefix: mergedClsPrefixRef,
            namespace: namespaceRef,
            mergedBodyStyle: mergedBodyStyleRef,
            handleMaskClick,
            handleEsc,
            mergedTheme: themeRef,
            cssVars: (0, vue_1.computed)(() => {
                const { common: { cubicBezierEaseInOut, cubicBezierEaseIn, cubicBezierEaseOut }, self: { color, textColor, boxShadow, lineHeight, headerPadding, footerPadding, bodyPadding, titleFontSize, titleTextColor, titleFontWeight, headerBorderBottom, footerBorderTop, closeColor, closeColorHover, closeColorPressed, closeSize } } = themeRef.value;
                return {
                    '--n-line-height': lineHeight,
                    '--n-color': color,
                    '--n-text-color': textColor,
                    '--n-box-shadow': boxShadow,
                    '--n-bezier': cubicBezierEaseInOut,
                    '--n-bezier-out': cubicBezierEaseOut,
                    '--n-bezier-in': cubicBezierEaseIn,
                    '--n-header-padding': headerPadding,
                    '--n-body-padding': bodyPadding,
                    '--n-footer-padding': footerPadding,
                    '--n-title-text-color': titleTextColor,
                    '--n-title-font-size': titleFontSize,
                    '--n-title-font-weight': titleFontWeight,
                    '--n-header-border-bottom': headerBorderBottom,
                    '--n-footer-border-top': footerBorderTop,
                    '--n-close-color': closeColor,
                    '--n-close-color-hover': closeColorHover,
                    '--n-close-color-pressed': closeColorPressed,
                    '--n-close-size': closeSize
                };
            }),
            isMounted: isMountedRef
        };
    },
    render() {
        const { mergedClsPrefix } = this;
        return ((0, vue_1.h)(vueuc_1.VLazyTeleport, { to: this.to, show: this.show }, {
            default: () => {
                return (0, vue_1.withDirectives)((0, vue_1.h)("div", { class: [`${mergedClsPrefix}-drawer-container`, this.namespace], style: this.cssVars, role: "none" },
                    (0, vue_1.h)(vue_1.Transition, { name: "fade-in-transition", appear: this.isMounted }, {
                        default: () => this.show ? ((0, vue_1.h)("div", { "aria-hidden": true, class: `${mergedClsPrefix}-drawer-mask`, onClick: this.handleMaskClick })) : null
                    }),
                    (0, vue_1.h)(DrawerBodyWrapper_1.default, Object.assign({}, this.$attrs, { class: [this.drawerClass, this.$attrs.class], style: [this.mergedBodyStyle, this.$attrs.style], contentStyle: this.contentStyle, placement: this.placement, scrollbarProps: this.scrollbarProps, show: this.show, displayDirective: this.displayDirective, nativeScrollbar: this.nativeScrollbar, trapFocus: this.trapFocus, autoFocus: this.autoFocus, onEsc: this.handleEsc }), this.$slots)), [[vdirs_1.zindexable, { zIndex: this.zIndex, enabled: this.show }]]);
            }
        }));
    }
});
