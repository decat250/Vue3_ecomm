"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCssVarsClass = void 0;
const vue_1 = require("vue");
const css_render_1 = require("css-render");
const context_1 = require("../config-provider/src/context");
const _utils_1 = require("../_utils");
const cssr_1 = require("../_utils/cssr");
function useCssVarsClass(componentName, hashRef, cssVarsRef, props) {
    var _a;
    if (!cssVarsRef)
        (0, _utils_1.throwError)('useCssVarsClass', 'cssVarsRef is not passed');
    const mergedThemeHashRef = (_a = (0, vue_1.inject)(context_1.configProviderInjectionKey, null)) === null || _a === void 0 ? void 0 : _a.mergedThemeHashRef;
    const cssVarsClassRef = (0, vue_1.ref)('');
    const mountStyle = () => {
        const cssVars = cssVarsRef.value;
        let style = '';
        for (const key in cssVars) {
            style += `${key}: ${cssVars[key]};`;
        }
        let finalThemeHash = componentName;
        const hashValue = hashRef ? hashRef.value : undefined;
        const themeHash = mergedThemeHashRef === null || mergedThemeHashRef === void 0 ? void 0 : mergedThemeHashRef.value;
        if (themeHash)
            finalThemeHash += '-' + themeHash;
        if (hashValue)
            finalThemeHash += '-' + hashValue;
        if (props.themeOverrides) {
            finalThemeHash += '-' + (0, css_render_1.hash)(JSON.stringify(props.themeOverrides));
        }
        cssVarsClassRef.value = finalThemeHash;
        (0, cssr_1.c)(`.${finalThemeHash}`, style).mount({
            id: finalThemeHash
        });
    };
    (0, vue_1.watchEffect)(() => {
        mountStyle();
    });
    return cssVarsClassRef;
}
exports.useCssVarsClass = useCssVarsClass;
