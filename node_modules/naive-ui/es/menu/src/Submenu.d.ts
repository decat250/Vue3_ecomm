import { PropType, VNodeChild } from 'vue';
import { MenuMixedOption, TmNode } from './interface';
export declare const submenuProps: {
    readonly rawNodes: {
        readonly type: PropType<MenuMixedOption[]>;
        readonly default: () => never[];
    };
    readonly tmNodes: {
        readonly type: PropType<TmNode[]>;
        readonly default: () => never[];
    };
    readonly tmNode: {
        readonly type: PropType<TmNode>;
        readonly required: true;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly icon: PropType<() => VNodeChild>;
    readonly onClick: PropType<() => void>;
    readonly internalKey: {
        readonly type: PropType<import("treemate").Key>;
        readonly required: true;
    };
    readonly root: BooleanConstructor;
    readonly isGroup: BooleanConstructor;
    readonly level: {
        readonly type: NumberConstructor;
        readonly required: true;
    };
    readonly title: PropType<string | (() => VNodeChild)>;
    readonly extra: PropType<string | (() => VNodeChild)>;
};
export declare const NSubmenu: import("vue").DefineComponent<{
    readonly rawNodes: {
        readonly type: PropType<MenuMixedOption[]>;
        readonly default: () => never[];
    };
    readonly tmNodes: {
        readonly type: PropType<TmNode[]>;
        readonly default: () => never[];
    };
    readonly tmNode: {
        readonly type: PropType<TmNode>;
        readonly required: true;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly icon: PropType<() => VNodeChild>;
    readonly onClick: PropType<() => void>;
    readonly internalKey: {
        readonly type: PropType<import("treemate").Key>;
        readonly required: true;
    };
    readonly root: BooleanConstructor;
    readonly isGroup: BooleanConstructor;
    readonly level: {
        readonly type: NumberConstructor;
        readonly required: true;
    };
    readonly title: PropType<string | (() => VNodeChild)>;
    readonly extra: PropType<string | (() => VNodeChild)>;
}, {
    menuProps: import("./Menu").MenuSetupProps;
    doSelect: import("./interface").OnUpdateValueImpl;
    inverted: import("vue").Ref<boolean>;
    isHorizontal: import("vue").Ref<boolean>;
    mergedClsPrefix: import("vue").Ref<string>;
    maxIconSize: import("vue").ComputedRef<number>;
    activeIconSize: import("vue").ComputedRef<number>;
    iconMarginRight: import("vue").ComputedRef<number>;
    dropdownPlacement: import("vue").ComputedRef<import("vueuc").FollowerPlacement>;
    dropdownShow: import("vue").Ref<boolean>;
    paddingLeft: import("vue").ComputedRef<number | undefined>;
    mergedDisabled: import("vue").ComputedRef<boolean>;
    mergedValue: import("vue").Ref<import("treemate").Key | null>;
    childActive: import("vue").ComputedRef<boolean>;
    collapsed: import("vue").ComputedRef<boolean>;
    dropdownEnabled: import("vue").ComputedRef<boolean>;
    handlePopoverShowChange: (value: boolean) => void;
    handleClick: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    readonly rawNodes: {
        readonly type: PropType<MenuMixedOption[]>;
        readonly default: () => never[];
    };
    readonly tmNodes: {
        readonly type: PropType<TmNode[]>;
        readonly default: () => never[];
    };
    readonly tmNode: {
        readonly type: PropType<TmNode>;
        readonly required: true;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly icon: PropType<() => VNodeChild>;
    readonly onClick: PropType<() => void>;
    readonly internalKey: {
        readonly type: PropType<import("treemate").Key>;
        readonly required: true;
    };
    readonly root: BooleanConstructor;
    readonly isGroup: BooleanConstructor;
    readonly level: {
        readonly type: NumberConstructor;
        readonly required: true;
    };
    readonly title: PropType<string | (() => VNodeChild)>;
    readonly extra: PropType<string | (() => VNodeChild)>;
}>>, {
    root: boolean;
    disabled: boolean;
    isGroup: boolean;
    tmNodes: TmNode[];
    rawNodes: MenuMixedOption[];
}>;
