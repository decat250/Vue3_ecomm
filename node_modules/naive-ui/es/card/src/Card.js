import { h, defineComponent, computed } from 'vue';
import { getPadding } from 'seemly';
import { useConfig, useTheme } from '../../_mixins';
import { call, createKey, keysOf } from '../../_utils';
import { NBaseClose } from '../../_internal';
import { cardLight } from '../styles';
import style from './styles/index.cssr';
import useRtl from '../../_mixins/use-rtl';
export const cardBaseProps = {
    title: String,
    contentStyle: [Object, String],
    headerStyle: [Object, String],
    headerExtraStyle: [Object, String],
    footerStyle: [Object, String],
    embedded: Boolean,
    segmented: {
        type: [Boolean, Object],
        default: false
    },
    size: {
        type: String,
        default: 'medium'
    },
    bordered: {
        type: Boolean,
        default: true
    },
    closable: {
        type: Boolean,
        default: false
    },
    hoverable: Boolean,
    role: String,
    onClose: [Function, Array]
};
export const cardBasePropKeys = keysOf(cardBaseProps);
const cardProps = Object.assign(Object.assign({}, useTheme.props), cardBaseProps);
export default defineComponent({
    name: 'Card',
    props: cardProps,
    setup(props) {
        const handleCloseClick = () => {
            const { onClose } = props;
            if (onClose)
                call(onClose);
        };
        const { mergedClsPrefixRef, NConfigProvider } = useConfig(props);
        const themeRef = useTheme('Card', '-card', style, cardLight, props, mergedClsPrefixRef);
        const rtlEnabledRef = useRtl('Card', NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedRtlRef, mergedClsPrefixRef);
        return {
            rtlEnabled: rtlEnabledRef,
            mergedClsPrefix: mergedClsPrefixRef,
            mergedTheme: themeRef,
            handleCloseClick,
            cssVars: computed(() => {
                const { size } = props;
                const { self: { color, colorModal, colorTarget, textColor, titleTextColor, titleFontWeight, borderColor, actionColor, borderRadius, closeColor, closeColorHover, closeColorPressed, lineHeight, closeSize, boxShadow, colorPopover, colorEmbedded, [createKey('padding', size)]: padding, [createKey('fontSize', size)]: fontSize, [createKey('titleFontSize', size)]: titleFontSize }, common: { cubicBezierEaseInOut } } = themeRef.value;
                const { top: paddingTop, left: paddingLeft, bottom: paddingBottom } = getPadding(padding);
                return {
                    '--n-bezier': cubicBezierEaseInOut,
                    '--n-border-radius': borderRadius,
                    '--n-color': props.embedded ? colorEmbedded : color,
                    '--n-color-modal': colorModal,
                    '--n-color-popover': colorPopover,
                    '--n-color-target': colorTarget,
                    '--n-text-color': textColor,
                    '--n-line-height': lineHeight,
                    '--n-action-color': actionColor,
                    '--n-title-text-color': titleTextColor,
                    '--n-title-font-weight': titleFontWeight,
                    '--n-close-color': closeColor,
                    '--n-close-color-hover': closeColorHover,
                    '--n-close-color-pressed': closeColorPressed,
                    '--n-border-color': borderColor,
                    '--n-box-shadow': boxShadow,
                    // size
                    '--n-padding-top': paddingTop,
                    '--n-padding-bottom': paddingBottom,
                    '--n-padding-left': paddingLeft,
                    '--n-font-size': fontSize,
                    '--n-title-font-size': titleFontSize,
                    '--n-close-size': closeSize
                };
            })
        };
    },
    render() {
        const { segmented, bordered, hoverable, mergedClsPrefix, rtlEnabled, $slots } = this;
        return (h("div", { class: [
                `${mergedClsPrefix}-card`,
                {
                    [`${mergedClsPrefix}-card--rtl`]: rtlEnabled,
                    [`${mergedClsPrefix}-card--content${typeof segmented !== 'boolean' && segmented.content === 'soft'
                        ? '-soft'
                        : ''}-segmented`]: segmented === true || (segmented !== false && segmented.content),
                    [`${mergedClsPrefix}-card--footer${typeof segmented !== 'boolean' && segmented.footer === 'soft'
                        ? '-soft'
                        : ''}-segmented`]: segmented === true || (segmented !== false && segmented.footer),
                    [`${mergedClsPrefix}-card--action-segmented`]: segmented === true || (segmented !== false && segmented.action),
                    [`${mergedClsPrefix}-card--bordered`]: bordered,
                    [`${mergedClsPrefix}-card--hoverable`]: hoverable
                }
            ], style: this.cssVars, role: this.role },
            $slots.cover ? (h("div", { class: `${mergedClsPrefix}-card-cover`, role: "none" }, $slots.cover())) : null,
            $slots.header || this.title || this.closable ? (h("div", { class: `${mergedClsPrefix}-card-header`, style: this.headerStyle },
                h("div", { class: `${mergedClsPrefix}-card-header__main`, role: "heading" }, $slots.header ? $slots.header() : this.title),
                $slots['header-extra'] ? (h("div", { class: `${mergedClsPrefix}-card-header__extra`, style: this.headerExtraStyle }, $slots['header-extra']())) : null,
                this.closable ? (h(NBaseClose, { clsPrefix: mergedClsPrefix, class: `${mergedClsPrefix}-card-header__close`, onClick: this.handleCloseClick })) : null)) : null,
            h("div", { class: `${mergedClsPrefix}-card__content`, style: this.contentStyle, role: "none" }, $slots),
            $slots.footer ? (h("div", { class: `${mergedClsPrefix}-card__footer`, style: this.footerStyle, role: "none" }, $slots.footer())) : null,
            $slots.action ? (h("div", { class: `${mergedClsPrefix}-card__action`, role: "none" }, $slots.action())) : null));
    }
});
